----------------------------------------------------UNIT 3 NOTES-------------------------------------------------
Key Words:
<link> == takes you to a different page
<button> == performs a function
CONTRAST: [with large text or adjacent visual elements it should be a 3:1] (contrast checker == https://webaim.org/resources/contrastchecker/)

TYPEFACES: they should be simple, not complex. Easily read and not misunderstood
---make sure the typefaces align, to not have multiple typefaces; that can confuse
---spacing
---line length and the size of the font (crucial so it can be read)
---Real text is modifiable which Text within Graphics isn't [it can be more blocky and messy, and it cant be adjusted]
---Embedded fonts are fonts inside a file document :)

CONVEY INFO:
!!! Do not rely on color to indicate and provide info !!!
-Underline text (demonstrates a link)
-Add more info to the color: to distinguish info
-Create a chart
-Make the text bold
HERE IS A LINK THAT HELP DESCRIBE IMAGES: -->  https://poet.diagramcenter.org/  <--


INSTRUCTIONS FOR GRAYSCALE:
Mac Instructions 
-Open settings
-Accessibility
-Display
-Scroll to "Color Filters"
-Toggle on color filters and make sure the filter type is "Grayscale"

Windows Instructions 
-Windows button
-Settings
-Accessibility
-Color Filters
-Toggle Grayscale


WEB ACCESSIBILITY:
-This ensure that the website can be used by people with disabilities, such as blindness, motor, auditory and many more. This includes screen readers, text and content that is easy to ready and understand.

Semantic: It provides an easier way to user the interface, using the elements as they need to be used. A simple example, instead of decorating a "p" to look like a Heading, just use H1

Keyboard Accessibility: doing this will make the website easier to manage and go through. Allows the user to get used to the site. Make it easy is the name of the game.

Screen Reader [INSTRUCTIONS]:
Mac Instructions 
-Open settings
-Accessibility
-Voice Over
-Toggle on

Windows Instructions
-Open settings
-Accessibility
-Narrator
-Toggle on
			


HOW TO DO THIS:
1)Semantic HTML
2)Provide text ALT (info about an image)
3)Ensure Keyboard Accessibility
4)Avoid using colors that have no meaning, adjust text to be readable and to be understood.
5)Use ARIA
--> This means that it means
------role = what it is (for example: button, they will see that this is a button)
------aria-expanded, aria-live = this explains what is happening
6)Assistive Tech: screen readers, keyboard navigation, and navigational tools



HOW TO TEST IF ITS ACCESSIBLE:
1) Automated Testing tools: WAVE, LIGHTHOUSE, axe DEVTOOLS, WebAIM Contrast Checker
2) Screen Reader: NVDA, VoiceOver, JAWS
3) Keyboard Navigation: being able to use [Tab], [Shift + Tab], [Enter], [Arrow Keys] (being able to reach all of the buttons with tabs, keys on a keyboard.)
4) Check ARIA and Semantic HTML: Inspect Element to see if everything is structed right and labeled
5) Simulate Different Disabilities: [No Coffee Chrome Extension = this simulates visual impairment.] [Colorblindness Simulators = to see how color looks for color blinded people] 


HOW ARE THESE APPLIED TO WEB?
1) Semantic HTML (BEST PRACTICE)
---this is how it is structured, use <nav> instead of a <div> for the navigation bar
2) Adding ARIA for Dynamic Content
---when HTML isn't enough we use this to show the user what each button, nav and menu does. It is a better explanation for the user. For example role = button would show the user what it actually is.
3) Ensuring Keyboard Accessibility
---people that cant use a mouse could navigate around with the following: [Tab], [Shift + Tab], [Enter], [Arrow Keys]
4) Improving Visual Accessibility
---This will help with color contrast to make it more visible. Especially for those that have low vision.
5) Providing Text Alt
---it provides a description of video and picture to ensure the user knows what its about.
6) Testing Accessibility
---Using the following programs to ensure it works: WAVE, NVDA


GRAPHIC DESIGN IN WEB!!!!
Fundamentals of Graphic Design
1) Balance: Symmetrical, Asymmetrical, Radial
2) Contrast High [gets your attention] and Low [looks a little bit more calm] Contrast
3) Focal Point: It is uses boldness, focus to have it be the main point
4) Alignment: creates organization, order
5) Repetition: something that is used over and over to create UNITY
6) Proximity: How close or far away something is. If they are related then its close.
7) White Space: Its the space not being used, adding focus to the design or object
8) Movement: It controls the eyes of the viewer, you tell them where to go
9) Unity and Harmony: how well they work together to deliver a message. Professional look

[EXAMPLES OF THIS IN WEB]
STEP 1: Identify the Purpose = who is it for? who is the audience? what is it trying to do?
STEP 2: Do Research = explore other brands, other companies to get a feel of whats the norm. Find themes, typography uses, images, colors etc.
STEP 3: Sketching and Wireframing = Identify where everything is going to go. How it will look, the button placements, the home, about and other pages layouts. Placements of paragraphs and images.
STEP 4: Design the UI = this is NOT CODING, this is drawing with pro sites, Adobe XD, Figma and other sites
STEP 5: Develop the Website = Write the HTML, CSS and JavaScript, begin to open the page in an ONLINE VIEWER, see how it looks, have it match or look like the mockup in the rough draft.
STEP 6: Test Accessibility and Usability: see of it works, using WAVE, Lighthouse and other programs meant to make the website more usable and friendlier for any user.
STEP 7: Launch and Maintain = you can use GITHUB to publish it and have it known to the public. Keeping it updated so it stays modern with the up to date tech and standards!!





CALL BACK FUNCTIONS:
1) It is used with Asynchronous Operations; setTimeout(), fetch()
---->these are tasks that take time to process. 
2) It is used with an Event Handling: for example addEventListener()
3) To be able to use the code over and over



WHEN TO USE THEM:
-Asynchronous operations, Event Handling, Iterating Over Data, Customization of Data {how the data should be fetched and received}
-Don't use code if its Synchronous Operations (if it doesn't need to wait on anything)

WHY ARE THERE ARRAY METHODS?
1) Simplifies Code (makes code easier, more easier than loops)
2) Improves Performance (makes the code become optimized internally)
3) Encourages Functional Programming: methods are used such as .map(), .filter(), .reduce()


map()---> [Transform each element]
const numbers = [1, 2, 3, 4, 5];
const squared = numbers.map(num => num ** 2);
console.log(squared); // [1, 4, 9, 16, 25]

filter()---> [Selects Certain Elements]
const ages = [15, 22, 30, 18, 12];
const adults = ages.filter(age => age >= 18);
console.log(adults); // [22, 30, 18]

reduce()---> [Compute a Single Value]
const prices = [10, 20, 30, 40];
const total = prices.reduce((sum, price) => sum + price, 0);
console.log(total); // 100

forEach()---> [Loop through each Element]
const fruits = ['apple', 'banana', 'cherry'];
fruits.forEach(fruit => console.log(fruit.toUpperCase()));
// Output: APPLE, BANANA, CHERRY

find()---> [Find the First Matching Element]
const numbers = [3, 7, 12, 5, 10];
const firstEven = numbers.find(num => num % 2 === 0);
console.log(firstEven); // 12

some()---> [Check if at least one matches]
const numbers = [3, 7, 9, 11];
const hasEven = numbers.some(num => num % 2 === 0);
console.log(hasEven); // false

every()---> [checks if they all match]
const scores = [90, 85, 88, 92];
const allPassed = scores.every(score => score >= 50);
console.log(allPassed); // true

sort()---> [sort an Array]
const numbers = [5, 2, 8, 1, 3];
numbers.sort((a, b) => a - b); // Ascending order
console.log(numbers); // [1, 2, 3, 5, 8]

reverse()---> [Reverse an Array]
const letters = ['a', 'b', 'c', 'd'];
letters.reverse();
console.log(letters); // ['d', 'c', 'b', 'a']

includes()---> [Checks if a Value Exists]
const colors = ['red', 'blue', 'green'];
console.log(colors.includes('blue')); // true
console.log(colors.includes('yellow')); // false


CHATGPT SPIT THIS OUT, SAME THING AS ABOVE BUT MUCH SIMPLIER:
// .map() = "Transforms each element in the array and returns a new array."
const result = array.map(element => /* transformation */);

// .filter() = "Filters elements based on a condition and returns a new array."
const result = array.filter(element => /* condition */);

// .forEach() = "Executes a function on each element in the array, but doesn't return a new array."
array.forEach(element => /* action */);

// .reduce() = "Reduces the array to a single value (e.g., sum, concatenation)."
const result = array.reduce((accumulator, element) => /* operation */, initialValue);

// .some() = "Checks if at least one element matches the condition. Returns true or false."
const result = array.some(element => /* condition */);

// .every() = "Checks if every element matches the condition. Returns true or false."
const result = array.every(element => /* condition */);

// .find() = "Finds the first element that matches the condition and returns it."
const result = array.find(element => /* condition */);


FORMS:

HOW DO THEY WORK?
-HTML form elements = it uses the following; <input>, <textarea>..
-User Input and Submission = when a user clicks a button or fills out a field then it will store or respond 
-Validation and Processing = make sure that the user typed or clicked on the right thing

WHAT ARE SOME PROBLEMS TO LOOK OUT FOR?
-Poor Accessibility = not grouping certain features, or missing labels
-Lack of Proper Validation = relying on a client side validation
-Bad User Experience = It doesn't work as well and form resets
-Security Issues = not using HTML when collecting data

HOW SHOULD I STYLE FORMS IN CSS?
Styling Input Fields : making it clear and nice. Adding padding and border-radius for a cleaner look.
Styling Labels & Forms layout : display block and other forms for the form to placed
Styling Buttons : making buttons stylish and very interactable
Custom Checkboxes and Radio Buttons : hide checkboxes and use the :: before element for styling

DIFFERENCE BETWEEN type, id, and name?
type = this identifies the behavior of certain element
id = it is how an element is classified, the id cant be repeated because it is singular use.
name = if they have the same name, then the computer groups them and send the info grouped together.

FORM ACCESSIBILITY
1) Labels and Instructions : using labels can help readers identify what the form is doing
2) Grouping Related Inputs : grouping info together, using <fieldset> and <legend> to do the grouping
3) Keyboard Navigation : being able to have the TAB on the keyboard be usable
4) Error Messages and Validation : using error messages when the user is inputting invalid info. (Nice and polite info)
5) Sufficient Contrast and Clickable : making sure that the buttons or the features that are meant to be click are working.

FAVICON

WHAT IS IT? 
1) It is the image at the top of the website, in the tabs, that identifies your website

HOW DO I ADD ONE?
1) Create a 16x16px image with the .ico, .png, .svg format
favicon.io also helps in creating this.
2) Add it to your website; in the head section with the <link>
3) Place is in the Root Directory
4) Test it

WHAT IS THE MOST COMMON SIZE?
1) Best practice and most common ones are the 16x16, 32x32, 48x48px

DIFFERENCE APPLE TOUCH AND FAVICON?
FAVICON = it is used for browser tabs, bookmarks and search results
-Typically 16x16px or 32x32px
-Saved as favicon.ico or a .png file

APPLE TOUCH ICON 
-used when users save a website to their home screen
-very high resolution
-stored as a PNG
-it is added in the head like; <link rel = "apple-touch-icon" href="apple-touch-icon.png">
-FAVICON is for smaller browser tabs and mobile screens (IOS)


OBJECTS IN JAVASCRIPT
- You can use them to store data
- Makes the code a bit more organized
- Dynamic Behaviors can be enabled
- I can support real-world modeling
- (OOP) this is a way a code can be structured which contains the following:
---> Encapsulation
---> Abstraction
---> Inheritance
---> Polymorphism

CREATE AN OBJECT:
1. Object Literal: is used for just simple objects with a few properties
---(small simple object, cant be used for multiple objects)

2. new Object() container
---(does the same thing as the object literal)

3. Function: (function Person(name, age)) [this is used when there are multiple objects of the same type
---(this is used to create multiple objects, reusable)

4. class (ES6+): it is a more simpler way to organize objects
---(large applications, supports inheritance, it is not used with beginners)

HOW DO I ACCESS THE PROPERTIES:
1. DOT NOTATION = person.name
		  person.age
(You can use it with nested objects)

2. BRACKET NOTATION = this works with special characters
		   console.log(person["full name"]);
		   this gets the variables from the other class
		   which is in the const person
(You can use it with nested objects)

3. Checking if a Property Exists:
		   .hasOwnProperty("name")); -- this is to see if a 			   property is actually there

USING ES MODLES:
-Much more simpler to debug
-Having separate files will allow you run the code a lot simpler

If you have two separate file that do two separate things, then you can figure out what is going on with what code; because if one doesn't work, then it can be easily targeted.

For example:
math.js
export const PI = 3.14159
export function add(a,b) {
	return a + b;
}

greet.js
export default function greet(name) {
	return `Hello, ${name}!`;
} 

Both of these scripts will allow you to run it in the code, each has its own function and their own thing. Doing this will allow for easier access to what they do most.

ES MODLES HELP ORGANIZE CODE IN JAVASCRIPT:
1. Separating Concerns
2. Avoids Global Scope Pollution
---allows for the code to run smoothly and not to override other parts of the code. Each thing will be in their own script allowing it to run
3. Encourages Reusability
---if you have a model, then it can be imported to other files so it can be used.
---for example if the function
4. Supports Lazy Loading
---you can have the code only be loaded when you want to, so if you don't want it to load then you can prevent it.



FLEXBOX:
It is a way to shape the containers without an actually dimension being mentioned.
Things like:

CONTAINER
Display: flex
flex-direction: defines the main axis
justify-content: aligns items along the main axis
align-items: aligns the items along the cross axis
flex-wrap: allows items to wrap onto multiple lines if needed


ITEMS
flex-grow: determines how much an item should grow
flex-shrink: how small an item should get
flex-basis: sets the default size of an item before if grows or shrinks (default size)
align-self: this overrides what align-items does

HOW TO DO IT:
1) Build a container: display: flex
2) Arrange Items with flex-direction [flex-direction: row], [flex-direction: column]
3) Control Spacing with justify-content [justify-content: center], [justify-content: space-between]
4) Align items [align-items]: [align-items:center], [align-items: stretch]
5) Make items flexible: flex: 1

DIFFERENCE: FLEXBOX AND GRID
Flexbox is for a single column and not that much room (One-Dimensional) (this is for simple things)
-when there is only one dimension
-want flexible content
-align Dynamically
-unknown content size
-NOT USE FLEX = when the design is a full page layout

Grid: it is strict and can add more rows and columns to it (Two Dimensional) (more complex items: image galleries, sections, and other objects)

CHROME LIGHTHOUSE TOOL:
1) Performance: measures the speed of the website, loading times
-Minimizes rendering blocks
-Optimizes images
-Enable lazy loading
-Reduce server response time
-Minify CSS, JavaScript, and HTML

2) Accessibility: checks if the websites follow best practice
-adds alt text to images
-ensures color contrast
-uses semantic HTML
-Keyboard navigation

3) Best Practices: checks for security issues and outdated tech
-Makes sure HTTPS is enabled
-avoid outdates API's
-Ensures links open in a secure manner

4) SEO: Analyzes whether the page follows search engine guidelines
-add meta descriptions
-use structured data for better indexing
-makes sure pages are mobile-friendly
-Optimize heading structure

5) Progressive Web App (PWA): Checks if the website meets PWA standards for offline use
-adds a service worker (for online support)
-Uses Web App Manifest
-Ensure fast loading on slow networks

HOW TO APPLY LIGHT HOUSE RESULTS:
1. Run and see the report
2. Fix high-priority issues
3. Retest the site
4. Continuously Monitor performance for optimization

SOCIAL MEDIA META TAGS:
1. Tags that control how a webpage is shared on different platforms, social medias like: Facebook, Twitter, Instagram, and many more.
Example: (OG) improves how a webpage is displayed when shared
	 twitter uses Twitter Card tags = twitter:card
- Pinterest uses og:image
- Youtube & Instagram use og:video

WHY THO?
- It looks better, more people can click it, it can be shared more frequently because it is attractive. Higher click rates. Looks, performance, popularity, get specific traffic, doesn't pull incorrect links when shared, makes the content look the same throughout all platforms.

WHEN DO I USE A SPECIFIC ONE THO?
Depends on what you are trying to use it for

-Facebook, LinkedIn, WhatsApp, etc would use OG tags
-Twitter would use twitter.card
-Basic SEO meta tag would be like: <link rel="canonical" href="https://example.com">

Other options would be:
-og:video
-og:locale
-pin:media






 
		   



























